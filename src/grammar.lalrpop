// Grammar is adapted from that found in the `amath` crate:
//
// https://github.com/vpzomtrrfrt/amath/blob/master/src/grammar.lalrpop

use crate::ast;
use std::str::FromStr;

grammar;


Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}


MapItem: (String, ast::Expr) = {
    <k:Str> ":" <v:Expr> => (k, v)
}


ExprList = Comma<Expr>;
MapItems = Comma<MapItem>;


pub Expr: ast::Expr = {
    <a:Expr> "and" <b:Rel> => ast::bin(ast::BinOp::And, a, b),
    <a:Expr> "or"  <b:Rel> => ast::bin(ast::BinOp::Or, a, b),
    <a:Expr> "xor" <b:Rel> => ast::bin(ast::BinOp::Xor, a, b),
    Rel
}


Rel: ast::Expr = {
    <a:Rel> "<"  <b:Sum> => ast::bin(ast::BinOp::Lt, a, b),
    <a:Rel> ">"  <b:Sum> => ast::bin(ast::BinOp::Gt, a, b),
    <a:Rel> "<=" <b:Sum> => ast::bin(ast::BinOp::Lte, a, b),
    <a:Rel> ">=" <b:Sum> => ast::bin(ast::BinOp::Gte, a, b),
    <a:Rel> "==" <b:Sum> => ast::bin(ast::BinOp::Eq, a, b),
    Sum
};


Sum: ast::Expr = {
    <a:Sum> "+" <b:Factor> => ast::bin(ast::BinOp::Add, a, b),
    <a:Sum> "-" <b:Factor> => ast::bin(ast::BinOp::Sub, a, b),
    Factor,
};


Factor: ast::Expr = {
    <a:Factor> "*" <b:Term> => ast::bin(ast::BinOp::Mul, a, b),
    <a:Factor> "/" <b:Term> => ast::bin(ast::BinOp::Div, a, b),
    Exp
};


Exp: ast::Expr = {
    <base:Exp> "^" <exp: InvTerm> => ast::bin(ast::BinOp::Pow, base, exp),
    InvTerm
}


InvTerm: ast::Expr = {
    "-" <a:InvTerm> => ast::un(ast::UnOp::Neg, a),
    "not" <a:InvTerm> => ast::un(ast::UnOp::Not, a),
    Call
};


Call: ast::Expr = {
    <func:Call> "(" <args:ExprList> ")" => ast::call(func, args),
    Selection
}


Selection: ast::Expr = {
    <obj:Selection> "." <id:Id> => ast::dot(obj, id.as_str()),
    <obj:Selection> "[" <e:Expr> "]" => ast::index(obj, e),
    Term
}


Term: ast::Expr = {
    Id => ast::Expr::Id(<>),
    Int => ast::Expr::Int(<>),
    Float => ast::Expr::Float(<>),
    Str => ast::Expr::Str(<>),
    Boolean => ast::Expr::Bool(<>),
    "(" <a:Expr> ")" => a,
    "[" <l:ExprList> "]" => ast::list(l),
    "{" <m:MapItems> "}" => ast::map(m)
};


Int: i64 = r"-?[0-9]+" => i64::from_str(<>).unwrap();
Float: f64 = r"-?[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap();
Id: String = r"[A-Za-z_][A-Za-z0-9_]*" => <>.to_owned();
Boolean: bool = {"true" => true, "false" => false};
Str: String = <s:r#""(([^\\"]|\\.)*)""#> => s[1..(s.len() - 1)].to_string();
