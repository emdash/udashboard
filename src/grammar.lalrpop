// LALRPOP grammar for the VM front-end.
//
// Adapted from that found in the `amath` crate, with heavy additions.
// https://github.com/vpzomtrrfrt/amath/blob/master/src/grammar.lalrpop

use crate::ast;
use std::str::FromStr;


grammar;


// Statement entry point.
pub Statement: ast::Statement = {
    FuncDef,
    ProcDef,
    TypeDef,
    Effect,
    Let,
    EffectExpr,
    Iteration,
}


// Expression entry point.
pub Expr: ast::Expr = {
    Block,
    SimpleExpr,
}


// Type expression entry point.
pub Type: ast::TypeTag = {
    "Bool" => ast::TypeTag::Bool,
    "Int" => ast::TypeTag::Int,
    "Float" => ast::TypeTag::Float,
    "Str" => ast::TypeTag::Str,
    "Point" => ast::TypeTag::Point,
    "List" "<" <item:Type> ">" => ast::TypeTag::List(ast::Node::new(item)),
    "Map" "<" <items:(<Str> ":" <Type>)*> ">" =>
        ast::TypeTag::Map(ast::to_map(items)),
    // TODO: Union
    // TODO?: Unit / None?
    "Record" "{" <items:(<Str> ":" <Type>)*> "}" =>
        ast::TypeTag::Record(ast::to_seq(items)),
    "(" <items:Comma<Type>> ")" => ast::TypeTag::Tuple(ast::to_seq(items)),
    "Func" "(" <args:Comma<Type>> ")" "->" <ret:Type> =>
        ast::TypeTag::Lambda(ast::to_seq(args), ast::Node::new(ret)),
    "Proc" "(" <args:Comma<Type>> ")" =>
        ast::TypeTag::Lambda(
            ast::to_seq(args),
            ast::Node::new(ast::TypeTag::Unit)),
    "List" "<" <item:Type> ">"
	=> ast::TypeTag::List(ast::Node::new(item)),
    "Map" "<" <items:(<Str> ":" <Type>)*> ">"
	=> ast::TypeTag::Map(ast::to_map(items)),
    "Record" "{" <items:Comma<Member>> "}"
	=> ast::TypeTag::Record(ast::to_alist(items)),
    "(" <items:Comma<Type>> ")"
	=> ast::TypeTag::Tuple(ast::to_seq(items)),
    "Union" "{" <types:Comma<Type>> "}"
	=> ast::TypeTag::Union(ast::to_seq(types))
}


// Syntactic sugar for defining a function returning a value.
FuncDef: ast::Statement =
    "func" <name:Id> <args:Arglist> "->" <ret:Type> <body:Block>
    => ast::def(name.as_str(), ast::lambda(args, ret, body));
// Any field in a record type.
pub Member: (String, ast::Member) = {
    "field" <name:Id> ":" <t:Type>
	=> (name, ast::Member::Field(ast::Node::new(t))),
    "method" <name:Id> <def:LambdaParts>
	=> (name, ast::Member::Method(def.0, def.1, def.2)),
    "const" <name:Id> ":" <t:Type> "=" <value:Expr>
	=> (name, ast::Member::StaticValue(ast::Node::new(value))),
    "static" <name:Id> <def:LambdaParts>
	=> (name, ast::Member::StaticMethod(def.0, def.1, def.2))
}


// Syntatic sugar for defining a function which returns no value.
ProcDef: ast::Statement =
    "proc" <name:Id> <args:Arglist> <body:Block>
    => ast::def(name.as_str(), ast::lambda(args, ast::TypeTag::Unit, body));


// The only way to introduce a type binding
TypeDef: ast::Statement
    = "type" <name:Id> ":" <t:Type>
    => ast::typedef(name.as_str(), t);


// Used for raw cairo operations.
Effect: ast::Statement =
    <name:Id> "<-" <exprs:ExprList> ";" => ast::emit(name.as_str(), exprs);


// Bind a name to a value.
Let: ast::Statement =
    "let" <name:Id> "=" <value:Expr> ";" => ast::def(name.as_str(), value);


// An expression evaluated for its side effects in a statement context.
//
// To keep the LALRPOP happy, this is a subset of expressions.
EffectExpr: ast::Statement = {
    <Cond> => ast::expr_for_effect(<>),
    TreeExpr
}


// Iterate over a collection.
Iteration: ast::Statement = {
    "for" <name:Id> "in" <list:Expr> <body:Block> =>
        ast::list_iter(name.as_str(), list, ast::expr_for_effect(body)),
    "for" "(" <key:Id> "," <value:Id> ")" "in" <map:Expr> <body:Block> =>
        ast::map_iter(key.as_str(), value.as_str(), map, ast::expr_for_effect(body)),
}


// Any expression which is not a Block.
//
// Needed to avoid the abiguity of nesting blocks.
SimpleExpr: ast::Expr = {
    Lambda,
    Cond,
    Logic,
}


// An if-else chain
Cond: ast::Expr =
    "if"
    <first:CondClause>
    <rest:("elif" <CondClause>)*>
    <default:("else" <Block>)?>
    => {
        let mut clauses = vec!{first};
        clauses.extend(rest);
        ast::cond(clauses, default.unwrap_or(ast::Expr::Unit))
    };



// Single clause in an if-else chain
CondClause: (ast::Expr, ast::Expr) = {
    "(" <pred: Expr> ")" <body: Block>
        => (pred, body),
}


// Single paramater in a function signature
Param: (String, ast::TypeTag) =
    <name:Id> ":" <t:Type> => (name, t);


// The argument list of a function signature
Arglist: ast::AList<ast::TypeTag> =
    "(" <args:Comma<Param>> ")" => args;


// An anonymous function expression.
Lambda: ast::Expr = <parts:LambdaParts> =>
	ast::lambda(parts.0, parts.1, parts.2);


// Code common to method and function definitions.
LambdaParts:
(ast::AList<ast::TypeTag>, ast::Node<ast::TypeTag>, ast::Node<ast::Expr>)
    = <args:Arglist> <ret:("->" <Type>)?> "=" <body:Expr>
    => (
	args,
	ast::Node::new(ret.unwrap_or(ast::TypeTag::Unit)),
	ast::Node::new(body)
    );


// A sequence of statements treated as an expression.
//
// If the `yield` keyword is present, then this block has a value.
Block: ast::Expr = {
    "{" <stmts:Statement+> <ret:("yield" <SimpleExpr>)?> "}"
        => ast::expr_block(stmts, ret.unwrap_or(ast::Expr::Unit)),
    "{" <ret:("yield" <SimpleExpr>)> "}" => ret,
}


// Expression entry point anow, this is the logic operators. This way
// sloppily-parenthesized logic hould do the least surprising thing.
Logic: ast::Expr = {
    <a:Logic> "and" <b:Rel> => ast::bin(ast::BinOp::And, a, b),
    <a:Logic> "or"  <b:Rel> => ast::bin(ast::BinOp::Or, a, b),
    <a:Logic> "xor" <b:Rel> => ast::bin(ast::BinOp::Xor, a, b),
    Rel
}


// Relational operators are the next highest precedence.
Rel: ast::Expr = {
    <a:Rel> "<"  <b:Sum> => ast::bin(ast::BinOp::Lt, a, b),
    <a:Rel> ">"  <b:Sum> => ast::bin(ast::BinOp::Gt, a, b),
    <a:Rel> "<=" <b:Sum> => ast::bin(ast::BinOp::Lte, a, b),
    <a:Rel> ">=" <b:Sum> => ast::bin(ast::BinOp::Gte, a, b),
    <a:Rel> "==" <b:Sum> => ast::bin(ast::BinOp::Eq, a, b),
    Sum
};


Sum: ast::Expr = {
    <a:Sum> "+" <b:Factor> => ast::bin(ast::BinOp::Add, a, b),
    <a:Sum> "-" <b:Factor> => ast::bin(ast::BinOp::Sub, a, b),
    Factor,
};


Factor: ast::Expr = {
    <a:Factor> "*" <b:Term> => ast::bin(ast::BinOp::Mul, a, b),
    <a:Factor> "/" <b:Term> => ast::bin(ast::BinOp::Div, a, b),
    Exp
};


Exp: ast::Expr = {
    <base:Exp> "^" <exp: InvTerm> => ast::bin(ast::BinOp::Pow, base, exp),
    InvTerm
}


// We want these unary operators applied to a function call to do the
// right thing. I.e. -foo() should parse as (- (foo)), not ((- foo)).
//
// The same thing applies to logical negation.
InvTerm: ast::Expr = {
    "-" <a:InvTerm> => ast::un(ast::UnOp::Neg, a),
    "not" <a:InvTerm> => ast::un(ast::UnOp::Not, a),
    Call
};


// Allow a function call to consume a trailing block in a statement context.
//
// Concept Inspired by OpenScad and Ruby
TreeExpr: ast::Statement = {
    <func:Selection> "(" <args:ExprList> ")" <block:Block>
        => {
            let mut args = args;
            args.push(ast::lambda(vec!{}, ast::TypeTag::Unit, block));
            ast::expr_for_effect(ast::call(func, args))
        },
    <func:Selection> "(" <args:ExprList> ")" ";"
        => ast::expr_for_effect(ast::call(func, args))
};

// We want indexing and selection to bind before function calls, so that
// foo.bar(a) parses as ((dot foo bar) a), not (dot foo (bar a))
Call: ast::Expr = {
    <func:Call> "(" <args:ExprList> ")" => ast::call(func, args),
    Selection
}


// XXX: Would like to allow an arbitrary expression to apear LHS
// without parens; however, this results in ambiguity that LALRPOP
// can't handle.
Selection: ast::Expr = {
    <obj:Selection> "." <id:Id> => ast::dot(obj, id.as_str()),
    <obj:Selection> "[" <e:Expr> "]" => ast::index(obj, e),
    Term
}


// Literals of any type except lambdas.
Term: ast::Expr = {
    Id => ast::Expr::Id(<>),
    Int => ast::Expr::Int(<>),
    Float => ast::Expr::Float(<>),
    Str => ast::Expr::Str(<>),
    Boolean => ast::Expr::Bool(<>),
    "(" <a:Expr> ")" => a,
    "[" <l:ExprList> "]" => ast::list(l),
    "{" <m:MapItems> "}" => ast::map(m),
};


// A single item in a map.
MapItem: (String, ast::Expr) = {
    <k:Str> ":" <v:Logic> => (k, v)
}


// Any commma-separated list of values.
ExprList = Comma<Expr>;


// So far only used in maps.
MapItems = Comma<MapItem>;


// Comma-separated lists of things.
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}


// Terminals
Int: i64 = r"-?[0-9]+" => i64::from_str(<>).unwrap();
Float: f64 = r"-?[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap();
Id: String = r"[A-Za-z_][A-Za-z0-9_]*" => <>.to_owned();
Boolean: bool = {"true" => true, "false" => false};
Str: String = <s:r#""(([^\\"]|\\.)*)""#> => s[1..(s.len() - 1)].to_string();
